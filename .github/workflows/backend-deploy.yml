name: Go Backend Deploy Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  GO_VERSION: '1.21'
  DOCKER_IMAGE: todo-backend

jobs:
  # Step 1: Build & Test Go Application
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Download dependencies
      run: go mod download && go mod verify
      
    - name: Run tests
      run: |
        echo "🧪 Running unit tests..."
        go test -v ./test/unit/...
        echo "🧪 Running integration tests..."
        go test -v ./test/integration/...
        echo "🧪 Running contract tests..."
        go test -v ./test/contract/...
        
    - name: Build application
      run: |
        echo "🏗️ Building Go application..."
        CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/main.go
        echo "✅ Build successful!"

  # Step 2: Deploy to Production K8s
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-test
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy Go Backend to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        password: ${{ secrets.DO_PASSWORD }}
        timeout: 20m
        command_timeout: 15m
        script: |
          echo "🚀 Starting Go backend deployment..."
          
          # System status
          echo "💾 Memory: $(free -h | awk '/^Mem:/{printf "%s used, %s available", $3, $7}')"
          
          # 🧹 AGGRESSIVE CLEANUP: Complete reset for fresh deployment
          echo "🧹 STEP 1: Cleaning Kubernetes resources..."
          k3s kubectl delete deployment todo-backend --ignore-not-found=true --timeout=60s
          k3s kubectl delete service todo-backend-service --ignore-not-found=true --timeout=60s
          k3s kubectl delete configmap todo-backend-config --ignore-not-found=true --timeout=30s
          k3s kubectl delete pods -l app=todo-backend --ignore-not-found=true --timeout=60s
          
          echo "🧹 STEP 2: Cleaning all Docker artifacts..."
          # Remove all todo-backend related images (including dangling ones)
          docker images | grep -E "(todo-backend|<none>)" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || echo "No old images found"
          # Force remove all unused Docker data
          docker system prune -af --volumes > /dev/null 2>&1
          docker builder prune -af > /dev/null 2>&1
          
          echo "🧹 STEP 3: Cleaning project directory and database..."
          cd /root
          # Complete removal of project directory
          rm -rf todo-backend 2>/dev/null || true
          # Remove any orphaned database files
          find /root -name "todo.db" -delete 2>/dev/null || true
          find /root -name "*.db" -path "*/todo-backend/*" -delete 2>/dev/null || true
          
          echo "🧹 STEP 4: Memory cleanup..."
          # Clear system caches for fresh start
          sync && echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true
          echo "📥 Cloning backend repository..."
          git clone --quiet https://github.com/deha388/todo-backend.git
          cd todo-backend
          
          # Build backend Docker image (clean slate)
          echo "🏗️ Building Go backend Docker image from scratch..."
          # Ensure completely clean Docker environment
          docker system prune -af --volumes > /dev/null 2>&1
          
          # Build with legacy Docker builder (no BuildKit)
          DOCKER_BUILDKIT=0 docker build \
            -t todo-backend:${{ github.sha }} \
            -t todo-backend:latest . || {
            echo "❌ Backend build failed, retrying without cache..."
            docker system prune -af > /dev/null 2>&1
            DOCKER_BUILDKIT=0 docker build --no-cache \
              -t todo-backend:${{ github.sha }} \
              -t todo-backend:latest .
          }
          
          # Import backend image to K3s
          echo "📥 Importing Go backend image to K3s..."
          docker save todo-backend:latest | sudo k3s ctr -n k8s.io images import -
          
          # Cleanup after build
          echo "🧹 Post-build cleanup..."
          docker system prune -f > /dev/null 2>&1
          # Clear caches but keep necessary system cache
          sync && echo 1 > /proc/sys/vm/drop_caches 2>/dev/null || true
          
          # Deploy backend to K3s
          echo "🚀 Applying Go backend to K3s..."
          
          # Apply the backend deployment using the dedicated K8s YAML file
          k3s kubectl apply -f k8s-deployment.yaml
          
          # Wait for backend deployment
          echo "⏳ Waiting for Go backend rollout..."
          k3s kubectl rollout status deployment/todo-backend --timeout=300s
          
          # Show backend status
          echo "📋 Go Backend deployment status:"
          k3s kubectl get pods --no-headers | grep todo-backend || echo "No backend pods found"
          k3s kubectl get service todo-backend-service || echo "No backend service found"
          
          # Test backend health and verify fresh deployment
          echo "🔍 Testing backend health and verifying fresh deployment..."
          POD_NAME=$(k3s kubectl get pods -l app=todo-backend -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          if [ ! -z "$POD_NAME" ]; then
            echo "✅ Pod found: $POD_NAME"
            # Wait for Go application to fully start (SQLite setup takes time)
            echo "⏳ Waiting for Go application to be ready..."
            sleep 30
            k3s kubectl exec $POD_NAME -- wget -qO- http://localhost:8083/health || echo "Health check failed"
            # Verify fresh database (should be empty)
            echo "🔍 Checking fresh database state..."
            k3s kubectl exec $POD_NAME -- wget -qO- http://localhost:8083/api/todos || echo "Fresh database check failed"
          else
            echo "❌ No backend pod found"
          fi
          
          echo "✅ Go Backend FRESH deployment completed!"
          echo "🔗 Backend service: todo-backend-service:8083"
          echo "💾 Memory usage: $(free -m | awk 'NR==2{printf "%.1f%% used", $3*100/$2}')"
          echo "🗃️ Database: Fresh SQLite database (empty state)"
          echo "🆕 Deployment: Completely fresh installation"
          
    - name: Backend Deployment Success
      run: |
        echo "🎉 Go Backend production deployment completed!"
        echo "📝 Summary:"
        echo "✅ Go application tested (unit + integration + contract)"
        echo "✅ Multi-stage Docker image built"
        echo "✅ Deployed to Kubernetes cluster"
        echo "✅ Health checks configured"
        echo "🔗 Backend API available at: todo-backend-service:8083"
        echo "📊 Endpoints:"
        echo "  - GET  /health"
        echo "  - GET  /api/todos"
        echo "  - POST /api/todos" 